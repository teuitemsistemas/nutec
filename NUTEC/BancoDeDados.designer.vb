'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:4.0.30319.42000
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="NUTEC")>  _
Partial Public Class BancoDeDadosDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAlunos(instance As Alunos)
    End Sub
  Partial Private Sub UpdateAlunos(instance As Alunos)
    End Sub
  Partial Private Sub DeleteAlunos(instance As Alunos)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.NUTEC.My.MySettings.Default.NUTECConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Alunos() As System.Data.Linq.Table(Of Alunos)
		Get
			Return Me.GetTable(Of Alunos)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alunos")>  _
Partial Public Class Alunos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdAluno As Integer
	
	Private _Nome As String
	
	Private _Endereco As String
	
	Private _Cidade As String
	
	Private _Telefone As String
	
	Private _Email As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdAlunoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAlunoChanged()
    End Sub
    Partial Private Sub OnNomeChanging(value As String)
    End Sub
    Partial Private Sub OnNomeChanged()
    End Sub
    Partial Private Sub OnEnderecoChanging(value As String)
    End Sub
    Partial Private Sub OnEnderecoChanged()
    End Sub
    Partial Private Sub OnCidadeChanging(value As String)
    End Sub
    Partial Private Sub OnCidadeChanged()
    End Sub
    Partial Private Sub OnTelefoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelefoneChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAluno", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdAluno() As Integer
		Get
			Return Me._IdAluno
		End Get
		Set
			If ((Me._IdAluno = value)  _
						= false) Then
				Me.OnIdAlunoChanging(value)
				Me.SendPropertyChanging
				Me._IdAluno = value
				Me.SendPropertyChanged("IdAluno")
				Me.OnIdAlunoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nome", DbType:="VarChar(100)")>  _
	Public Property Nome() As String
		Get
			Return Me._Nome
		End Get
		Set
			If (String.Equals(Me._Nome, value) = false) Then
				Me.OnNomeChanging(value)
				Me.SendPropertyChanging
				Me._Nome = value
				Me.SendPropertyChanged("Nome")
				Me.OnNomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Endereco", DbType:="VarChar(100)")>  _
	Public Property Endereco() As String
		Get
			Return Me._Endereco
		End Get
		Set
			If (String.Equals(Me._Endereco, value) = false) Then
				Me.OnEnderecoChanging(value)
				Me.SendPropertyChanging
				Me._Endereco = value
				Me.SendPropertyChanged("Endereco")
				Me.OnEnderecoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cidade", DbType:="VarChar(50)")>  _
	Public Property Cidade() As String
		Get
			Return Me._Cidade
		End Get
		Set
			If (String.Equals(Me._Cidade, value) = false) Then
				Me.OnCidadeChanging(value)
				Me.SendPropertyChanging
				Me._Cidade = value
				Me.SendPropertyChanged("Cidade")
				Me.OnCidadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefone", DbType:="VarChar(16)")>  _
	Public Property Telefone() As String
		Get
			Return Me._Telefone
		End Get
		Set
			If (String.Equals(Me._Telefone, value) = false) Then
				Me.OnTelefoneChanging(value)
				Me.SendPropertyChanging
				Me._Telefone = value
				Me.SendPropertyChanged("Telefone")
				Me.OnTelefoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
